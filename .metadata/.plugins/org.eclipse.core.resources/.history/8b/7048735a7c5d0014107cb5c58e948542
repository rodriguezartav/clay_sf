@RestResource(urlMapping='/clay-api/*')
global class  ClayController {
    
    //handleRest receives an REST Operation['get,post,put,del'] a url and a JSON

	/*
		Class Entry Point for Visualforce Remoting
		It requires: 
			An HTTP VERB that defines what operation to perform ['get,post,put,del']
			An Url that defines the targeted object or custom operation to be performaned
			An optional Fields argument for upsert and query operations
	*/
	
	@HttpGet
    global static string authenticate() {

		RestRequest req = RestContext.request;

    	string action = req.params.get('action');
    	string app_name = req.params.get('app_name');
    	string dev_code = req.params.get('dev_code');
		string app_org = req.params.get('app_org');
		
		return getRouter(action, app_name, dev_code, app_org);

    }

	public static string getRouter(string action, string app_name, string dev_code, string app_org){
		if(action == 'GET_APP'){
			app__c app = getApp(app_name, dev_code, app_org, true);
			return JSON.serialize(app);
		}
		else if(action == 'GET_VERSION'){
			app__c app = getApp(app_name, dev_code, app_org, false);
			if(app == null){ return '{}'; }
			else{ return JSON.serialize(app); }
		}else{
			return JSON.serializePretty( getDev(dev_code) );
		}
	}

	@HttpPost
    global static string upsertApp(string app_name, string dev_code, integer version) {	
    	dev__c dev = getDev(dev_code);
    	app__c app = getApp(app_name, dev_code,null,false);
    	if(app == null){
    		app__c app = new App__c();
    		app.name = app_name;
    		app.version = version;
    		app.org__c= dev.org__c;
    		if(app.Version_History__c == null){ app.Version_History__c = ''; }
    		app.Version_History__c += ', ' + dev.Name + ' updated to ' + app.version + ' on ' + Datetime.now().formatGmt(pString);
    		insert app;	
    	}else{
    		app.version__c = version;
    		app.Version_History__c += dev.Name + ' created ' + app.version + ' on ' + Datetime.now().formatGmt(pString);
    		update app;
    	}
    
    	return JSON.serialize(app);
    }
    
    public static dev__c getDev(string dev_code){
    	if(dev_code == null ){
    		throw new ClayException('dev_code must be provided');
    	}
    	 
    	List<dev__c> devs = [select id,Name, Org__r.Name, org__c, Email__c from dev__c where code__c = :dev_code];
    	
    	if(devs.size() ==0){
    		throw new ClayException('No registered developers found with code: ' + dev_code);
    	}
    	return devs.get(0);
    }

    public static app__c getApp(string app_name, string dev_code, string app_org, boolean strict){
    	dev__c dev = getDev(dev_code);

		if(app_org == null){ app_org = dev.org__r.Name; }

    	List<app__c> apps = [select id, name, org__r.Name,version__c, Version_History__c from app__c where name = :app_name and org__r.Name = :app_org];
    	
    	if(apps.size() == 0 && strict == true){
    		throw new ClayException('App ' + app_name + ' not found in organization ' + dev.Org__r.Name );
    	}
    	if(apps.size() ==0){
    		return null; 
    	}
    	return apps.get(0);
    }

}